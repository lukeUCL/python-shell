# Generated from shellLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,106,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        3,0,44,8,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,4,6,57,8,
        6,11,6,12,6,58,1,7,4,7,62,8,7,11,7,12,7,63,1,7,1,7,1,8,4,8,69,8,
        8,11,8,12,8,70,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,5,11,81,8,11,
        10,11,12,11,84,9,11,1,11,1,11,1,12,1,12,5,12,90,8,12,10,12,12,12,
        93,9,12,1,12,1,12,1,13,1,13,1,13,5,13,100,8,13,10,13,12,13,103,9,
        13,1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,1,0,6,9,0,9,10,13,13,32,32,34,34,39,39,59,
        60,62,62,96,96,124,124,2,0,9,9,32,32,2,0,10,10,13,13,3,0,10,10,13,
        13,39,39,2,0,92,92,96,96,5,0,10,10,13,13,34,34,92,92,96,96,115,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,43,1,0,0,0,3,45,1,
        0,0,0,5,47,1,0,0,0,7,49,1,0,0,0,9,51,1,0,0,0,11,53,1,0,0,0,13,56,
        1,0,0,0,15,61,1,0,0,0,17,68,1,0,0,0,19,74,1,0,0,0,21,76,1,0,0,0,
        23,78,1,0,0,0,25,87,1,0,0,0,27,96,1,0,0,0,29,30,3,13,6,0,30,31,3,
        27,13,0,31,32,3,13,6,0,32,44,1,0,0,0,33,34,3,13,6,0,34,35,3,27,13,
        0,35,44,1,0,0,0,36,37,3,27,13,0,37,38,3,13,6,0,38,44,1,0,0,0,39,
        40,3,13,6,0,40,41,3,25,12,0,41,42,3,13,6,0,42,44,1,0,0,0,43,29,1,
        0,0,0,43,33,1,0,0,0,43,36,1,0,0,0,43,39,1,0,0,0,44,2,1,0,0,0,45,
        46,5,60,0,0,46,4,1,0,0,0,47,48,5,62,0,0,48,6,1,0,0,0,49,50,5,39,
        0,0,50,8,1,0,0,0,51,52,5,34,0,0,52,10,1,0,0,0,53,54,5,96,0,0,54,
        12,1,0,0,0,55,57,8,0,0,0,56,55,1,0,0,0,57,58,1,0,0,0,58,56,1,0,0,
        0,58,59,1,0,0,0,59,14,1,0,0,0,60,62,7,1,0,0,61,60,1,0,0,0,62,63,
        1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,65,1,0,0,0,65,66,6,7,0,0,
        66,16,1,0,0,0,67,69,7,2,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,68,1,
        0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,73,6,8,0,0,73,18,1,0,0,0,74,
        75,5,124,0,0,75,20,1,0,0,0,76,77,5,59,0,0,77,22,1,0,0,0,78,82,3,
        7,3,0,79,81,8,3,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,
        83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,86,3,7,3,0,86,24,1,0,0,
        0,87,91,3,11,5,0,88,90,8,4,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,
        1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,91,1,0,0,0,94,95,3,11,5,0,
        95,26,1,0,0,0,96,101,3,9,4,0,97,100,3,25,12,0,98,100,8,5,0,0,99,
        97,1,0,0,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,
        1,0,0,0,102,104,1,0,0,0,103,101,1,0,0,0,104,105,3,9,4,0,105,28,1,
        0,0,0,9,0,43,58,63,70,82,91,99,101,1,6,0,0
    ]

class shellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CONCAT_ARG = 1
    LT = 2
    GT = 3
    SINGLE_QUOTE = 4
    DOUBLE_QUOTE = 5
    BACK_QUOTE = 6
    UNQUOTED = 7
    WS = 8
    NEWLINE = 9
    PIPE = 10
    SEMI = 11
    SINGLE_QUOTED_TEXT = 12
    BACK_QUOTED_TEXT = 13
    DOUBLE_QUOTED_TEXT = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<'", "'>'", "'''", "'\"'", "'`'", "'|'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "CONCAT_ARG", "LT", "GT", "SINGLE_QUOTE", "DOUBLE_QUOTE", "BACK_QUOTE", 
            "UNQUOTED", "WS", "NEWLINE", "PIPE", "SEMI", "SINGLE_QUOTED_TEXT", 
            "BACK_QUOTED_TEXT", "DOUBLE_QUOTED_TEXT" ]

    ruleNames = [ "CONCAT_ARG", "LT", "GT", "SINGLE_QUOTE", "DOUBLE_QUOTE", 
                  "BACK_QUOTE", "UNQUOTED", "WS", "NEWLINE", "PIPE", "SEMI", 
                  "SINGLE_QUOTED_TEXT", "BACK_QUOTED_TEXT", "DOUBLE_QUOTED_TEXT" ]

    grammarFileName = "shellLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


