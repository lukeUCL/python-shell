# Generated from shellLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,125,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,3,0,48,8,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,4,6,61,8,6,11,6,12,6,62,1,7,4,7,66,8,7,11,7,12,7,67,1,
        7,1,7,1,8,4,8,73,8,8,11,8,12,8,74,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
        1,11,5,11,85,8,11,10,11,12,11,88,9,11,1,11,1,11,1,12,1,12,1,12,5,
        12,95,8,12,10,12,12,12,98,9,12,1,12,1,12,1,13,1,13,1,13,1,13,5,13,
        106,8,13,10,13,12,13,109,9,13,1,13,1,13,1,14,1,14,1,14,5,14,116,
        8,14,10,14,12,14,119,9,14,1,14,1,14,1,15,1,15,1,15,0,0,16,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,0,31,0,1,0,6,9,0,9,10,13,13,32,32,34,34,39,39,59,60,62,62,96,
        96,124,124,2,0,9,9,32,32,2,0,10,10,13,13,3,0,10,10,13,13,39,39,2,
        0,92,92,96,96,5,0,10,10,13,13,34,34,92,92,96,96,136,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,47,1,0,0,0,3,49,1,0,0,0,5,51,
        1,0,0,0,7,53,1,0,0,0,9,55,1,0,0,0,11,57,1,0,0,0,13,60,1,0,0,0,15,
        65,1,0,0,0,17,72,1,0,0,0,19,78,1,0,0,0,21,80,1,0,0,0,23,82,1,0,0,
        0,25,91,1,0,0,0,27,101,1,0,0,0,29,112,1,0,0,0,31,122,1,0,0,0,33,
        34,3,13,6,0,34,35,3,27,13,0,35,36,3,13,6,0,36,48,1,0,0,0,37,38,3,
        13,6,0,38,39,3,27,13,0,39,48,1,0,0,0,40,41,3,27,13,0,41,42,3,13,
        6,0,42,48,1,0,0,0,43,44,3,13,6,0,44,45,3,25,12,0,45,46,3,13,6,0,
        46,48,1,0,0,0,47,33,1,0,0,0,47,37,1,0,0,0,47,40,1,0,0,0,47,43,1,
        0,0,0,48,2,1,0,0,0,49,50,5,60,0,0,50,4,1,0,0,0,51,52,5,62,0,0,52,
        6,1,0,0,0,53,54,5,39,0,0,54,8,1,0,0,0,55,56,5,34,0,0,56,10,1,0,0,
        0,57,58,5,96,0,0,58,12,1,0,0,0,59,61,8,0,0,0,60,59,1,0,0,0,61,62,
        1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,14,1,0,0,0,64,66,7,1,0,0,
        65,64,1,0,0,0,66,67,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,69,1,
        0,0,0,69,70,6,7,0,0,70,16,1,0,0,0,71,73,7,2,0,0,72,71,1,0,0,0,73,
        74,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,77,6,8,0,
        0,77,18,1,0,0,0,78,79,5,124,0,0,79,20,1,0,0,0,80,81,5,59,0,0,81,
        22,1,0,0,0,82,86,5,39,0,0,83,85,8,3,0,0,84,83,1,0,0,0,85,88,1,0,
        0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,89,1,0,0,0,88,86,1,0,0,0,89,90,
        5,39,0,0,90,24,1,0,0,0,91,96,5,96,0,0,92,95,3,31,15,0,93,95,8,4,
        0,0,94,92,1,0,0,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,
        1,0,0,0,97,99,1,0,0,0,98,96,1,0,0,0,99,100,5,96,0,0,100,26,1,0,0,
        0,101,107,5,34,0,0,102,106,3,31,15,0,103,106,3,29,14,0,104,106,8,
        5,0,0,105,102,1,0,0,0,105,103,1,0,0,0,105,104,1,0,0,0,106,109,1,
        0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,110,1,0,0,0,109,107,1,
        0,0,0,110,111,5,34,0,0,111,28,1,0,0,0,112,117,3,11,5,0,113,116,3,
        31,15,0,114,116,8,4,0,0,115,113,1,0,0,0,115,114,1,0,0,0,116,119,
        1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,120,1,0,0,0,119,117,
        1,0,0,0,120,121,3,11,5,0,121,30,1,0,0,0,122,123,5,92,0,0,123,124,
        9,0,0,0,124,32,1,0,0,0,12,0,47,62,67,74,86,94,96,105,107,115,117,
        1,6,0,0
    ]

class shellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CONCAT_ARG = 1
    LT = 2
    GT = 3
    SINGLE_QUOTE = 4
    DOUBLE_QUOTE = 5
    BACK_QUOTE = 6
    UNQUOTED = 7
    WS = 8
    NEWLINE = 9
    PIPE = 10
    SEMI = 11
    SINGLE_QUOTED_TEXT = 12
    BACK_QUOTED_TEXT = 13
    DOUBLE_QUOTED_TEXT = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<'", "'>'", "'''", "'\"'", "'`'", "'|'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "CONCAT_ARG", "LT", "GT", "SINGLE_QUOTE", "DOUBLE_QUOTE", "BACK_QUOTE", 
            "UNQUOTED", "WS", "NEWLINE", "PIPE", "SEMI", "SINGLE_QUOTED_TEXT", 
            "BACK_QUOTED_TEXT", "DOUBLE_QUOTED_TEXT" ]

    ruleNames = [ "CONCAT_ARG", "LT", "GT", "SINGLE_QUOTE", "DOUBLE_QUOTE", 
                  "BACK_QUOTE", "UNQUOTED", "WS", "NEWLINE", "PIPE", "SEMI", 
                  "SINGLE_QUOTED_TEXT", "BACK_QUOTED_TEXT", "DOUBLE_QUOTED_TEXT", 
                  "NESTED_BACK_QUOTE", "ESCAPE_SEQUENCE" ]

    grammarFileName = "shellLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


